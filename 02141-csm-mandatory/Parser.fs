// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsp"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | AND
  | ANDAND
  | LSQ
  | RSQ
  | SEMI
  | OR
  | OROR
  | NEGATE
  | EQUAL
  | GT
  | LT
  | ASSIGN
  | ELSE
  | TRUE
  | FALSE
  | PRODUCE
  | SKIP
  | IF
  | FI
  | DO
  | OD
  | EOF
  | STRING of (string)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_AND
    | TOKEN_ANDAND
    | TOKEN_LSQ
    | TOKEN_RSQ
    | TOKEN_SEMI
    | TOKEN_OR
    | TOKEN_OROR
    | TOKEN_NEGATE
    | TOKEN_EQUAL
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_ASSIGN
    | TOKEN_ELSE
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_PRODUCE
    | TOKEN_SKIP
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_EOF
    | TOKEN_STRING
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_arithmetic
    | NONTERM_bools
    | NONTERM_cmd
    | NONTERM_guardedcmd

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TIMES  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | POW  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | AND  -> 7 
  | ANDAND  -> 8 
  | LSQ  -> 9 
  | RSQ  -> 10 
  | SEMI  -> 11 
  | OR  -> 12 
  | OROR  -> 13 
  | NEGATE  -> 14 
  | EQUAL  -> 15 
  | GT  -> 16 
  | LT  -> 17 
  | ASSIGN  -> 18 
  | ELSE  -> 19 
  | TRUE  -> 20 
  | FALSE  -> 21 
  | PRODUCE  -> 22 
  | SKIP  -> 23 
  | IF  -> 24 
  | FI  -> 25 
  | DO  -> 26 
  | OD  -> 27 
  | EOF  -> 28 
  | STRING _ -> 29 
  | NUM _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TIMES 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_POW 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_AND 
  | 8 -> TOKEN_ANDAND 
  | 9 -> TOKEN_LSQ 
  | 10 -> TOKEN_RSQ 
  | 11 -> TOKEN_SEMI 
  | 12 -> TOKEN_OR 
  | 13 -> TOKEN_OROR 
  | 14 -> TOKEN_NEGATE 
  | 15 -> TOKEN_EQUAL 
  | 16 -> TOKEN_GT 
  | 17 -> TOKEN_LT 
  | 18 -> TOKEN_ASSIGN 
  | 19 -> TOKEN_ELSE 
  | 20 -> TOKEN_TRUE 
  | 21 -> TOKEN_FALSE 
  | 22 -> TOKEN_PRODUCE 
  | 23 -> TOKEN_SKIP 
  | 24 -> TOKEN_IF 
  | 25 -> TOKEN_FI 
  | 26 -> TOKEN_DO 
  | 27 -> TOKEN_OD 
  | 28 -> TOKEN_EOF 
  | 29 -> TOKEN_STRING 
  | 30 -> TOKEN_NUM 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_arithmetic 
    | 3 -> NONTERM_arithmetic 
    | 4 -> NONTERM_arithmetic 
    | 5 -> NONTERM_arithmetic 
    | 6 -> NONTERM_arithmetic 
    | 7 -> NONTERM_arithmetic 
    | 8 -> NONTERM_arithmetic 
    | 9 -> NONTERM_arithmetic 
    | 10 -> NONTERM_arithmetic 
    | 11 -> NONTERM_arithmetic 
    | 12 -> NONTERM_arithmetic 
    | 13 -> NONTERM_bools 
    | 14 -> NONTERM_bools 
    | 15 -> NONTERM_bools 
    | 16 -> NONTERM_bools 
    | 17 -> NONTERM_bools 
    | 18 -> NONTERM_bools 
    | 19 -> NONTERM_bools 
    | 20 -> NONTERM_bools 
    | 21 -> NONTERM_bools 
    | 22 -> NONTERM_bools 
    | 23 -> NONTERM_bools 
    | 24 -> NONTERM_bools 
    | 25 -> NONTERM_bools 
    | 26 -> NONTERM_bools 
    | 27 -> NONTERM_cmd 
    | 28 -> NONTERM_cmd 
    | 29 -> NONTERM_cmd 
    | 30 -> NONTERM_cmd 
    | 31 -> NONTERM_cmd 
    | 32 -> NONTERM_cmd 
    | 33 -> NONTERM_guardedcmd 
    | 34 -> NONTERM_guardedcmd 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | AND  -> "AND" 
  | ANDAND  -> "ANDAND" 
  | LSQ  -> "LSQ" 
  | RSQ  -> "RSQ" 
  | SEMI  -> "SEMI" 
  | OR  -> "OR" 
  | OROR  -> "OROR" 
  | NEGATE  -> "NEGATE" 
  | EQUAL  -> "EQUAL" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | ASSIGN  -> "ASSIGN" 
  | ELSE  -> "ELSE" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | PRODUCE  -> "PRODUCE" 
  | SKIP  -> "SKIP" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | EOF  -> "EOF" 
  | STRING _ -> "STRING" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | ANDAND  -> (null : System.Object) 
  | LSQ  -> (null : System.Object) 
  | RSQ  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | OROR  -> (null : System.Object) 
  | NEGATE  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | PRODUCE  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 27us; 65535us; 24us; 4us; 25us; 5us; 26us; 6us; 27us; 7us; 28us; 8us; 29us; 9us; 30us; 10us; 33us; 11us; 35us; 12us; 36us; 13us; 47us; 14us; 48us; 14us; 49us; 14us; 50us; 14us; 51us; 14us; 52us; 15us; 54us; 16us; 55us; 17us; 56us; 18us; 57us; 19us; 58us; 20us; 61us; 21us; 62us; 22us; 64us; 23us; 69us; 14us; 72us; 14us; 77us; 14us; 9us; 65535us; 36us; 45us; 47us; 40us; 48us; 41us; 49us; 42us; 50us; 43us; 51us; 44us; 69us; 46us; 72us; 46us; 77us; 46us; 3us; 65535us; 0us; 2us; 68us; 66us; 75us; 67us; 3us; 65535us; 69us; 70us; 72us; 73us; 77us; 76us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 31us; 41us; 45us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 30us; 1us; 1us; 6us; 2us; 2us; 3us; 4us; 5us; 6us; 6us; 2us; 3us; 3us; 4us; 5us; 6us; 6us; 2us; 3us; 4us; 4us; 5us; 6us; 6us; 2us; 3us; 4us; 5us; 5us; 6us; 6us; 2us; 3us; 4us; 5us; 6us; 6us; 6us; 2us; 3us; 4us; 5us; 6us; 7us; 6us; 2us; 3us; 4us; 5us; 6us; 8us; 6us; 2us; 3us; 4us; 5us; 6us; 11us; 6us; 2us; 3us; 4us; 5us; 6us; 12us; 12us; 2us; 3us; 4us; 5us; 6us; 12us; 20us; 21us; 22us; 23us; 24us; 25us; 11us; 2us; 3us; 4us; 5us; 6us; 20us; 21us; 22us; 23us; 24us; 25us; 6us; 2us; 3us; 4us; 5us; 6us; 20us; 6us; 2us; 3us; 4us; 5us; 6us; 21us; 6us; 2us; 3us; 4us; 5us; 6us; 22us; 6us; 2us; 3us; 4us; 5us; 6us; 23us; 6us; 2us; 3us; 4us; 5us; 6us; 24us; 6us; 2us; 3us; 4us; 5us; 6us; 25us; 6us; 2us; 3us; 4us; 5us; 6us; 27us; 6us; 2us; 3us; 4us; 5us; 6us; 28us; 6us; 2us; 3us; 4us; 5us; 6us; 28us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 2us; 10us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 2us; 12us; 26us; 1us; 12us; 1us; 13us; 1us; 14us; 5us; 15us; 15us; 16us; 17us; 18us; 5us; 15us; 16us; 16us; 17us; 18us; 5us; 15us; 16us; 17us; 17us; 18us; 5us; 15us; 16us; 17us; 18us; 18us; 5us; 15us; 16us; 17us; 18us; 19us; 5us; 15us; 16us; 17us; 18us; 26us; 5us; 15us; 16us; 17us; 18us; 33us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 21us; 2us; 22us; 23us; 1us; 23us; 2us; 24us; 25us; 1us; 25us; 1us; 26us; 2us; 27us; 28us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 2us; 30us; 30us; 2us; 30us; 33us; 1us; 30us; 1us; 31us; 2us; 31us; 34us; 1us; 31us; 1us; 32us; 2us; 32us; 34us; 1us; 32us; 1us; 33us; 2us; 34us; 34us; 1us; 34us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 16us; 23us; 30us; 37us; 44us; 51us; 58us; 65us; 72us; 85us; 97us; 104us; 111us; 118us; 125us; 132us; 139us; 146us; 153us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 179us; 181us; 183us; 185us; 188us; 190us; 192us; 194us; 200us; 206us; 212us; 218us; 224us; 230us; 236us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; 255us; 257us; 260us; 262us; 264us; 267us; 269us; 271us; 273us; 275us; 277us; 280us; 283us; 285us; 287us; 290us; 292us; 294us; 297us; 299us; 301us; 304us; |]
let _fsyacc_action_rows = 78
let _fsyacc_actionTableElements = [|4us; 32768us; 23us; 65us; 24us; 69us; 26us; 72us; 29us; 60us; 0us; 49152us; 2us; 32768us; 11us; 68us; 28us; 3us; 0us; 16385us; 1us; 16386us; 4us; 28us; 1us; 16387us; 4us; 28us; 3us; 16388us; 0us; 24us; 1us; 25us; 4us; 28us; 3us; 16389us; 0us; 24us; 1us; 25us; 4us; 28us; 1us; 16390us; 4us; 28us; 3us; 16391us; 0us; 24us; 1us; 25us; 4us; 28us; 3us; 16392us; 0us; 24us; 1us; 25us; 4us; 28us; 6us; 32768us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 10us; 34us; 6us; 32768us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 6us; 37us; 10us; 32768us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 6us; 37us; 14us; 53us; 15us; 52us; 16us; 55us; 17us; 57us; 9us; 32768us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 14us; 53us; 15us; 52us; 16us; 55us; 17us; 57us; 5us; 16404us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16405us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16406us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16407us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16408us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16409us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16411us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 6us; 32768us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 10us; 63us; 5us; 16412us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 0us; 16393us; 1us; 16394us; 9us; 33us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 0us; 16395us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 36us; 14us; 51us; 20us; 38us; 21us; 39us; 29us; 32us; 30us; 31us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 2us; 16400us; 7us; 47us; 8us; 49us; 0us; 16401us; 2us; 16402us; 7us; 47us; 8us; 49us; 0us; 16403us; 5us; 32768us; 6us; 59us; 7us; 47us; 8us; 49us; 12us; 48us; 13us; 50us; 5us; 32768us; 7us; 47us; 8us; 49us; 12us; 48us; 13us; 50us; 22us; 75us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 36us; 14us; 51us; 20us; 38us; 21us; 39us; 29us; 32us; 30us; 31us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 36us; 14us; 51us; 20us; 38us; 21us; 39us; 29us; 32us; 30us; 31us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 36us; 14us; 51us; 20us; 38us; 21us; 39us; 29us; 32us; 30us; 31us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 36us; 14us; 51us; 20us; 38us; 21us; 39us; 29us; 32us; 30us; 31us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 36us; 14us; 51us; 20us; 38us; 21us; 39us; 29us; 32us; 30us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 1us; 32768us; 15us; 54us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 6us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 15us; 56us; 29us; 32us; 30us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 6us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 15us; 58us; 29us; 32us; 30us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 0us; 16410us; 2us; 32768us; 9us; 62us; 18us; 61us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 1us; 32768us; 18us; 64us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 35us; 29us; 32us; 30us; 31us; 0us; 16413us; 1us; 16414us; 11us; 68us; 1us; 16417us; 11us; 68us; 4us; 32768us; 23us; 65us; 24us; 69us; 26us; 72us; 29us; 60us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 36us; 14us; 51us; 20us; 38us; 21us; 39us; 29us; 32us; 30us; 31us; 2us; 32768us; 19us; 77us; 25us; 71us; 0us; 16415us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 36us; 14us; 51us; 20us; 38us; 21us; 39us; 29us; 32us; 30us; 31us; 2us; 32768us; 19us; 77us; 27us; 74us; 0us; 16416us; 4us; 32768us; 23us; 65us; 24us; 69us; 26us; 72us; 29us; 60us; 1us; 16418us; 19us; 77us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 36us; 14us; 51us; 20us; 38us; 21us; 39us; 29us; 32us; 30us; 31us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 12us; 14us; 18us; 22us; 24us; 28us; 32us; 39us; 46us; 57us; 67us; 73us; 79us; 85us; 91us; 97us; 103us; 109us; 116us; 122us; 128us; 134us; 140us; 146us; 152us; 158us; 164us; 165us; 167us; 173us; 174us; 180us; 189us; 190us; 191us; 192us; 193us; 196us; 197us; 200us; 201us; 207us; 213us; 222us; 231us; 240us; 249us; 258us; 264us; 266us; 272us; 279us; 285us; 292us; 298us; 299us; 302us; 308us; 314us; 316us; 322us; 323us; 325us; 327us; 332us; 341us; 344us; 345us; 354us; 357us; 358us; 363us; 365us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 1us; 1us; 4us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 4us; 3us; 4us; 3us; 4us; 3us; 3us; 6us; 1us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 16395us; 65535us; 65535us; 16396us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 284 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 293 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsp"
                                                  _1 
                   )
# 39 "Parser.fsp"
                 : cmd));
# 304 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsp"
                                                         TimesExpr(_1,_3) 
                   )
# 49 "Parser.fsp"
                 : arithmetic));
# 316 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsp"
                                                         DivExpr(_1,_3) 
                   )
# 50 "Parser.fsp"
                 : arithmetic));
# 328 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsp"
                                                         PlusExpr(_1,_3) 
                   )
# 51 "Parser.fsp"
                 : arithmetic));
# 340 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsp"
                                                         MinusExpr(_1,_3) 
                   )
# 52 "Parser.fsp"
                 : arithmetic));
# 352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsp"
                                                         PowExpr(_1,_3) 
                   )
# 53 "Parser.fsp"
                 : arithmetic));
# 364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsp"
                                                         UPlusExpr(_2) 
                   )
# 54 "Parser.fsp"
                 : arithmetic));
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsp"
                                                         UMinusExpr(_2) 
                   )
# 55 "Parser.fsp"
                 : arithmetic));
# 386 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsp"
                                                         Num(_1) 
                   )
# 56 "Parser.fsp"
                 : arithmetic));
# 397 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsp"
                                         Str(_1) 
                   )
# 57 "Parser.fsp"
                 : arithmetic));
# 408 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsp"
                                                       ArrayAccess(_1, _3) 
                   )
# 58 "Parser.fsp"
                 : arithmetic));
# 420 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsp"
                                                         _2 
                   )
# 59 "Parser.fsp"
                 : arithmetic));
# 431 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsp"
                                    True 
                   )
# 62 "Parser.fsp"
                 : bools));
# 441 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsp"
                                     False 
                   )
# 63 "Parser.fsp"
                 : bools));
# 451 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsp"
                                            And(_1, _3) 
                   )
# 64 "Parser.fsp"
                 : bools));
# 463 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsp"
                                           Or(_1, _3) 
                   )
# 65 "Parser.fsp"
                 : bools));
# 475 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsp"
                                              AndAnd(_1, _3) 
                   )
# 66 "Parser.fsp"
                 : bools));
# 487 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsp"
                                             OrOr(_1, _3) 
                   )
# 67 "Parser.fsp"
                 : bools));
# 499 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsp"
                                          Negate(_2) 
                   )
# 68 "Parser.fsp"
                 : bools));
# 510 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsp"
                                                        Equal(_1, _3) 
                   )
# 69 "Parser.fsp"
                 : bools));
# 522 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsp"
                                                             NEqual(_1, _4) 
                   )
# 70 "Parser.fsp"
                 : bools));
# 534 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsp"
                                                      Gt(_1, _3) 
                   )
# 71 "Parser.fsp"
                 : bools));
# 546 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsp"
                                                          Gte(_1, _4) 
                   )
# 72 "Parser.fsp"
                 : bools));
# 558 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsp"
                                                      Lt(_1, _3)
                   )
# 73 "Parser.fsp"
                 : bools));
# 570 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsp"
                                                          Lte(_1, _4) 
                   )
# 74 "Parser.fsp"
                 : bools));
# 582 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsp"
                                            _2 
                   )
# 75 "Parser.fsp"
                 : bools));
# 593 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsp"
                                                        VarAssign(_1, _3) 
                   )
# 78 "Parser.fsp"
                 : cmd));
# 605 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : arithmetic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsp"
                                                                      ArrayAssign(_1, _3, _6) 
                   )
# 79 "Parser.fsp"
                 : cmd));
# 618 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsp"
                                         Skip 
                   )
# 80 "Parser.fsp"
                 : cmd));
# 628 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cmd)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : cmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsp"
                                               Next(_1, _3) 
                   )
# 81 "Parser.fsp"
                 : cmd));
# 640 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : guardedcmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsp"
                                                  If(_2) 
                   )
# 82 "Parser.fsp"
                 : cmd));
# 651 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : guardedcmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsp"
                                                  Do(_2) 
                   )
# 83 "Parser.fsp"
                 : cmd));
# 662 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bools)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : cmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsp"
                                               Cond(_1, _3) 
                   )
# 86 "Parser.fsp"
                 : guardedcmd));
# 674 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : guardedcmd)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : guardedcmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsp"
                                                     Else(_1, _3) 
                   )
# 87 "Parser.fsp"
                 : guardedcmd));
|]
# 687 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : cmd =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
